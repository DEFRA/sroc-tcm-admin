name: DOCKER

on:
  push:
    # Trigger this workflow on changes to `main`
    branches: [ main ]
    # Trigger this workflow if a semver tag is pushed
    tags: [ 'v*.*.*' ]

env:
  REPOSITORY: tactical_charging_module/sroc-tcm-admin

jobs:
  build:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones block `git describe --always --tags` from working later in 'Set all tags'

      # Configure our AWS credentials and region environment variables for use in other GitHub Actions
      # https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_ENV_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ENV_ACCOUNT }}:role/${{ secrets.AWS_ENV_ROLE }}

      # Login to AWS ECR private. It will use the credentials we configured in the previous step
      # https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate raw tag
        id: raw-tag
        run:
          echo "raw_tag={git describe --always --tags}" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}
          tags: |
            type=semver,priority=900,pattern={{raw}}
            type=raw,priority=800,value=${{ steps.raw-tag.outputs.raw_tag }}
          labels: |
            org.opencontainers.image.licenses=OGL-UK-3.0

      # The combination of the original tags plus the sed calculated ones are combined and stored as a multiline string
      # in a new env var.
      #
      # Some things to note
      #  - each line of the HEREDOC must output something. That is why we call 'echo' in each one
      #  - steps.meta.outputs.tags is itself a multiline string so we must wrap the call in quotes else the second line
      #    of the string is interpreted as a command
      #  - GitHub action's `set-output` truncates multiline strings which is why we have resorted to what you see below
      #    to get a value which contains all the possible tags as a multiline string
      #  - the 'if' determines if this is a push to `main` or a new tag. If a push to `main` we add a unique tag, for
      #    example `v0.13.2-2-g9ce6d11`. This is to support testing
      #
      # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#multiline-strings
      # https://github.community/t/set-output-truncates-multiline-strings/16852/8
      # - name: Set all tags
      #   run: |
      #     echo 'ALL_TAGS<<EOF' >> $GITHUB_ENV
      #     echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV
      #     if [ ${{ startsWith(github.ref, 'refs/tags/v') }} = false ]; then echo "${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY }}:$(git describe --always --tags)"; fi >> $GITHUB_ENV
      #     echo 'EOF' >> $GITHUB_ENV

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: production
          build-args: |
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: true
          labels: ${{ steps.meta_github.outputs.labels }}
          tags: ${{ env.ALL_TAGS }}
