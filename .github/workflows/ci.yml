name: CI

# We want this workflow to trigger when
#
# - a change is made to `main` either because of a direct push or when a PR is merged
# - whenever a PR is created or updated by a team member
# - whenever a PR is created or updated by Dependabot
#
# That last scenario is what triggers `pull_request_target` to be fired but it is insecure and can allow malicious
# access to repo secrets. This is why we also have a big 'if' condition to ensure the build only runs when
# `pull_request_target` is triggered if its a Dependabot PR.
#
# Documents that discuss some of this
# https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/automating-dependabot-with-github-actions#handling-pull_request-events
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
#
# Credit to https://github.com/davidboike who posted a link to his solution in the GitHub community
# https://github.community/t/dependabot-doesnt-see-github-actions-secrets/167104/42
on:
  push:
    branches:
      - main
  pull_request:
  pull_request_target:

jobs:
  build:
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push'
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest
    env:
      DEVISE_MAILER_SENDER: no-reply@example.com
      POSTGRES_HOST: localhost
      POSTGRES_PASSWORD: pinafore
      POSTGRES_PORT: 5432
      POSTGRES_USERNAME: postgres
      # Though we don't have redis running, we keep the env var so the app does not complain about a missing env var
      REDIS_URL: "redis://localhost:6379"

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12.5-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pinafore
          POSTGRES_DB: sroc-tcm-admin_test
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started. You must have this so the runner knows to wait till
        # postgres is up and running before proceeding
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonarcloud analysis

      # For Dependabot PR's which are triggered from pull_request_target if we don't specify a specific ref we'll just
      # end up checking out the PR base branch
      - name: Checkout repository (dependabot)
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.number }}/merge'
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonarcloud analysis

      # We don't have to specify the ruby version, or grab it from .ruby-verion. This action supports reading the
      # version from .ruby-verion itself
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Database migrations
        run: |
          RAILS_ENV=test bundle exec rake db:migrate

      # Run linting first. No point running the tests if there is a linting issue
      - name: Run lint check
        run: |
          bundle exec rubocop --format progress --format json --out rubocop-result.json

      # This includes an extra run step. The sonarcloud analysis will be run in a docker container with the current
      # folder mounted as `/github/workspace`. The problem is when the .resultset.json file is generated it will
      # reference the code in the current folder. So to enable sonarcloud to matchup code coverage with the files we use
      # sed to update the references in .resultset.json
      # https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/6
      - name: Run unit tests
        run: |
          bundle exec rails test
          bundle exec rspec
          sed -i 's/\/home\/runner\/work\/sroc-tcm-admin\/sroc-tcm-admin\//\/github\/workspace\//g' coverage/.resultset.json

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is provided automatically by GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # This needs to be set in your repo; settings -> secrets
